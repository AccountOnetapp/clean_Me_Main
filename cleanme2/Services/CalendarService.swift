//
//  CalendarService.swift
//  cleanme2
//
//  Created by AI Assistant on 18.08.25.
//

import Foundation
import EventKit
import Combine

@MainActor
final class CalendarService: ObservableObject {
    
    // MARK: - Published Properties
    @Published var events: [SystemCalendarEvent] = []
    @Published var isLoading = false
    @Published var authorizationStatus: EKAuthorizationStatus = .notDetermined
    @Published var errorMessage: String?
    
    // MARK: - Private Properties
    private let eventStore = EKEventStore()
    private var cancellables = Set<AnyCancellable>()
    private let whitelistService = WhitelistService()
    
    // MARK: - Initialization
    init() {
        print("üèÅ [CalendarService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CalendarService")
        checkAuthorizationStatus()
        setupWhitelistObserver()
        print("üèÅ [CalendarService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    }
    
    private func setupWhitelistObserver() {
        print("üîó [CalendarService.setupWhitelistObserver] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ whitelist")
        print("üîó [CalendarService.setupWhitelistObserver] WhitelistService —Å–æ–¥–µ—Ä–∂–∏—Ç: \(whitelistService.whitelistedEvents.count) —Å–æ–±—ã—Ç–∏–π")
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ whitelist –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        whitelistService.$whitelistedEvents
            .sink { [weak self] whitelistedEvents in
                print("üîó [CalendarService.setupWhitelistObserver.sink] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ whitelist: \(whitelistedEvents.count) —Å–æ–±—ã—Ç–∏–π")
                // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ whitelist –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏–π
                Task { @MainActor in
                    self?.updateEventsWhitelistStatus()
                }
            }
            .store(in: &cancellables)
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
        print("üîó [CalendarService.setupWhitelistObserver] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å")
        Task { @MainActor in
            self.updateEventsWhitelistStatus()
        }
    }
    
    @MainActor
    private func updateEventsWhitelistStatus() {
        let whitelistedIdentifiers = whitelistService.getWhitelistedEventIdentifiers()
        print("üîÑ [CalendarService.updateEventsWhitelistStatus] –û–±–Ω–æ–≤–ª—è–µ–º whitelist —Å—Ç–∞—Ç—É—Å –¥–ª—è \(events.count) —Å–æ–±—ã—Ç–∏–π")
        print("üîÑ [CalendarService.updateEventsWhitelistStatus] Whitelist —Å–æ–¥–µ—Ä–∂–∏—Ç: \(whitelistedIdentifiers.count) –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        if !whitelistedIdentifiers.isEmpty {
            print("üîÑ [CalendarService.updateEventsWhitelistStatus] –ü–µ—Ä–≤—ã–µ 3 whitelist ID:")
            for (i, id) in whitelistedIdentifiers.prefix(3).enumerated() {
                print("   \(i+1). '\(id)'")
            }
        }
        
        var updatedCount = 0
        var matchedCount = 0
        
        for index in events.indices {
            // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            let compositeIdentifier = events[index].eventIdentifier
            let isWhitelisted = whitelistedIdentifiers.contains(compositeIdentifier)
            
            if isWhitelisted {
                matchedCount += 1
                print("üîÑ [CalendarService.updateEventsWhitelistStatus] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '\(events[index].title)' (\(compositeIdentifier))")
            }
            
            if events[index].isWhiteListed != isWhitelisted {
                events[index].isWhiteListed = isWhitelisted
                updatedCount += 1
                print("üîÑ [CalendarService.updateEventsWhitelistStatus] –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è '\(events[index].title)': \(isWhitelisted)")
            }
            
            // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ whitelist, —É–±–∏—Ä–∞–µ–º –æ—Ç–º–µ—Ç–∫—É —Å–ø–∞–º–∞
            if isWhitelisted {
                events[index].isMarkedAsSpam = false
            }
        }
        
        print("üîÑ [CalendarService.updateEventsWhitelistStatus] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: \(matchedCount)")
        print("üîÑ [CalendarService.updateEventsWhitelistStatus] –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: \(updatedCount)")
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    func requestCalendarAccess() async {
        if #available(iOS 17.0, *) {
            do {
                let granted = try await eventStore.requestFullAccessToEvents()
                await MainActor.run {
                    self.authorizationStatus = granted ? .fullAccess : .denied
                    if granted {
                        Task {
                            await self.loadEvents()
                        }
                    }
                }
            } catch {
                await MainActor.run {
                    self.errorMessage = "Failed to request calendar access: \(error.localizedDescription)"
                    self.authorizationStatus = .denied
                }
            }
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π API –¥–ª—è iOS 16 –∏ –Ω–∏–∂–µ
            return await withCheckedContinuation { continuation in
                eventStore.requestAccess(to: .event) { granted, error in
                    Task { @MainActor in
                        if let error = error {
                            self.errorMessage = "Failed to request calendar access: \(error.localizedDescription)"
                            self.authorizationStatus = .denied
                        } else {
                            self.authorizationStatus = granted ? .authorized : .denied
                            if granted {
                                Task {
                                    await self.loadEvents()
                                }
                            }
                        }
                        continuation.resume()
                    }
                }
            }
        }
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    func loadEvents(from startDate: Date? = nil, to endDate: Date? = nil) async {
        let hasAccess = if #available(iOS 17.0, *) {
            authorizationStatus == .fullAccess
        } else {
            authorizationStatus == .authorized
        }
        
        guard hasAccess else {
            await requestCalendarAccess()
            return
        }
        
        await MainActor.run {
            self.isLoading = true
            self.errorMessage = nil
        }
        
        let start = startDate ?? Calendar.current.date(byAdding: .year, value: -1, to: Date()) ?? Date()
        let end = endDate ?? Calendar.current.date(byAdding: .year, value: 1, to: Date()) ?? Date()
        
        let predicate = eventStore.predicateForEvents(withStart: start, end: end, calendars: nil)
        let ekEvents = eventStore.events(matching: predicate)
        
        let whitelistedIdentifiers = whitelistService.getWhitelistedEventIdentifiers()
        print("üîÑ [CalendarService.loadEvents] –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(ekEvents.count) —Å–æ–±—ã—Ç–∏–π –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        print("üîÑ [CalendarService.loadEvents] Whitelist —Å–æ–¥–µ—Ä–∂–∏—Ç: \(whitelistedIdentifiers.count) –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        var whitelistedCount = 0
        let systemEvents = ekEvents.map { ekEvent in
            // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist —Å—Ç–∞—Ç—É—Å–∞
            let compositeIdentifier = "\(ekEvent.eventIdentifier)_\(ekEvent.startDate.timeIntervalSince1970)"
            let isWhitelisted = whitelistedIdentifiers.contains(compositeIdentifier)
            if isWhitelisted {
                whitelistedCount += 1
                print("üîÑ [CalendarService.loadEvents] –ù–∞–π–¥–µ–Ω–æ whitelisted —Å–æ–±—ã—Ç–∏–µ: '\(ekEvent.title)' (\(compositeIdentifier))")
            }
            return SystemCalendarEvent(from: ekEvent, isWhitelisted: isWhitelisted)
        }.sorted(by: { $0.startDate > $1.startDate }) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        
        print("üîÑ [CalendarService.loadEvents] –°–æ–∑–¥–∞–Ω–æ \(systemEvents.count) SystemCalendarEvent, –∏–∑ –Ω–∏—Ö whitelisted: \(whitelistedCount)")
        
        await MainActor.run {
            self.events = systemEvents
            self.isLoading = false
            self.updateEventsWhitelistStatus()
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    func deleteEvent(_ event: SystemCalendarEvent) async -> EventDeletionResult {
        print("üóëÔ∏è [CalendarService] –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ: '\(event.title)' (\(event.eventIdentifier))")
        
        let hasAccess = if #available(iOS 17.0, *) {
            authorizationStatus == .fullAccess
        } else {
            authorizationStatus == .authorized
        }
        
        guard hasAccess else {
            print("‚ùå [CalendarService] –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return .failed(.noPermission)
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π eventIdentifier –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ
        let originalEventIdentifier: String
        if event.eventIdentifier.contains("_") {
            originalEventIdentifier = String(event.eventIdentifier.split(separator: "_").first ?? "")
        } else {
            originalEventIdentifier = event.eventIdentifier
        }
        
        print("üîç [CalendarService] –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º ID: '\(originalEventIdentifier)'")
        
        // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ EKEvent
        guard let ekEvent = eventStore.event(withIdentifier: originalEventIdentifier) else {
            print("‚ùå [CalendarService] –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ ID: '\(originalEventIdentifier)'")
            return .failed(.eventNotFound)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
        if !canDeleteEvent(ekEvent) {
            let reason = getCannotDeleteReason(ekEvent)
            print("‚ùå [CalendarService] –°–æ–±—ã—Ç–∏–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: \(reason)")
            return .failed(.cannotDelete(reason: reason))
        }
        
        do {
            try eventStore.remove(ekEvent, span: .thisEvent)
            print("‚úÖ [CalendarService] –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
            await MainActor.run {
                let beforeCount = self.events.count
                self.events.removeAll {
                    $0.eventIdentifier == event.eventIdentifier &&
                    Calendar.current.isDate($0.startDate, inSameDayAs: event.startDate)
                }
                let afterCount = self.events.count
                print("üóëÔ∏è [CalendarService] –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ '\(event.title)' –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ (\(beforeCount) -> \(afterCount))")
            }
            
            return .success
        } catch {
            print("‚ùå [CalendarService] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: \(error.localizedDescription)")
            await MainActor.run {
                self.errorMessage = "Failed to delete event: \(error.localizedDescription)"
            }
            return .failed(.systemError(error))
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
    private func canDeleteEvent(_ ekEvent: EKEvent) -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –∑–∞–ø–∏—Å–∏
        guard ekEvent.calendar.allowsContentModifications else {
            return false
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º –∏–∑ –æ–±—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        if ekEvent.calendar.type == .subscription || ekEvent.calendar.type == .birthday {
            return false
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º, —Å–æ–∑–¥–∞–Ω–Ω—ã–º –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –æ–±—â–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        if ekEvent.calendar.type == .calDAV && ekEvent.organizer != nil {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if let organizer = ekEvent.organizer,
               let currentUserEmail = getCurrentUserEmail(),
               !organizer.url.absoluteString.contains(currentUserEmail) {
                return false
            }
        }
        
        return true
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–±—ã—Ç–∏–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å
    private func getCannotDeleteReason(_ ekEvent: EKEvent) -> String {
        if !ekEvent.calendar.allowsContentModifications {
            return "'\(ekEvent.calendar.title)' calendar is read-only and doesn't allow modifications."
        }
        
        if ekEvent.calendar.type == .subscription {
            return "'\(ekEvent.calendar.title)' calendar cannot be deleted.\n\nBut you can delete the account that owns this calendar. You can learn detailed steps from our guide on how to get rid of suspicious or unwanted event sources in your calendar."
        }
        
        if ekEvent.calendar.type == .birthday {
            return "Birthday events cannot be deleted from the calendar."
        }
        
        if ekEvent.calendar.type == .calDAV && ekEvent.organizer != nil {
            if let organizer = ekEvent.organizer {
                let organizerName = organizer.name ?? "another user"
                return "'\(organizerName)' calendar cannot be deleted.\n\nBut you can delete the account that owns this calendar. You can learn detailed steps from our guide on how to get rid of suspicious or unwanted event sources in your calendar."
            }
        }
        
        return "This event cannot be deleted due to calendar restrictions."
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç email —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    private func getCurrentUserEmail() -> String? {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return nil
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
    func deleteEvents(_ eventsToDelete: [SystemCalendarEvent]) async -> EventsDeletionResult {
        var deletedCount = 0
        var failedEvents: [(SystemCalendarEvent, EventDeletionError)] = []
        
        for event in eventsToDelete {
            let result = await deleteEvent(event)
            switch result {
            case .success:
                deletedCount += 1
            case .failed(let error):
                failedEvents.append((event, error))
            }
        }
        
        return EventsDeletionResult(
            deletedCount: deletedCount,
            totalCount: eventsToDelete.count,
            failedEvents: failedEvents
        )
    }
    
    /// –ü–æ–º–µ—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ —Å–ø–∞–º (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∑–∞–º–µ—Ç–∫–∏)
    func markAsSpam(_ event: SystemCalendarEvent) async -> Bool {
        let hasAccess = if #available(iOS 17.0, *) {
            authorizationStatus == .fullAccess
        } else {
            authorizationStatus == .authorized
        }
        
        guard hasAccess else { return false }
        
        guard let ekEvent = eventStore.event(withIdentifier: event.eventIdentifier) else {
            return false
        }
        
        do {
            ekEvent.notes = (ekEvent.notes ?? "") + "\n[MARKED_AS_SPAM]"
            try eventStore.save(ekEvent, span: .thisEvent)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            await MainActor.run {
                if let index = self.events.firstIndex(where: { $0.id == event.id }) {
                    self.events[index].isMarkedAsSpam = true
                }
            }
            
            return true
        } catch {
            await MainActor.run {
                self.errorMessage = "Failed to mark event as spam: \(error.localizedDescription)"
            }
            return false
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    func addToWhiteList(_ event: SystemCalendarEvent) async -> Bool {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π whitelist —á–µ—Ä–µ–∑ WhitelistService
        whitelistService.addToWhitelist(event)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        await MainActor.run {
            if let index = self.events.firstIndex(where: {
                $0.eventIdentifier == event.eventIdentifier &&
                Calendar.current.isDate($0.startDate, inSameDayAs: event.startDate)
            }) {
                print("üîÑ [CalendarService] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è '\(self.events[index].title)' -> isWhiteListed = true")
                self.events[index].isWhiteListed = true
                self.events[index].isMarkedAsSpam = false
            } else {
                print("‚ùå [CalendarService] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: '\(event.title)'")
            }
        }
        
        return true
    }
    
    /// –£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
    func removeFromWhiteList(_ event: SystemCalendarEvent) async -> Bool {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ whitelist
        whitelistService.removeFromWhitelist(event)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        await MainActor.run {
            if let index = self.events.firstIndex(where: {
                $0.eventIdentifier == event.eventIdentifier &&
                Calendar.current.isDate($0.startDate, inSameDayAs: event.startDate)
            }) {
                print("üîÑ [CalendarService] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è '\(self.events[index].title)' -> isWhiteListed = false")
                self.events[index].isWhiteListed = false
            } else {
                print("‚ùå [CalendarService] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: '\(event.title)'")
            }
        }
        
        return true
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
    func getEventsStatistics() -> EventsStatistics {
        let total = events.count
        let spam = events.filter { $0.isMarkedAsSpam }.count
        let whitelisted = events.filter { $0.isWhiteListed }.count
        let regular = total - spam - whitelisted
        
        return EventsStatistics(
            total: total,
            spam: spam,
            whitelisted: whitelisted,
            regular: regular
        )
    }
    
    // MARK: - Private Methods
    
    private func checkAuthorizationStatus() {
        authorizationStatus = EKEventStore.authorizationStatus(for: .event)
        print("üîê [CalendarService.checkAuthorizationStatus] –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: \(authorizationStatus)")
        
        let hasAccess = if #available(iOS 17.0, *) {
            authorizationStatus == .fullAccess
        } else {
            authorizationStatus == .authorized
        }
        
        print("üîê [CalendarService.checkAuthorizationStatus] –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø: \(hasAccess)")
        
        if hasAccess {
            print("üîê [CalendarService.checkAuthorizationStatus] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            Task {
                await loadEvents()
            }
        } else {
            print("üîê [CalendarService.checkAuthorizationStatus] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞, —Å–æ–±—ã—Ç–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è")
        }
    }
}

// MARK: - Supporting Models

struct SystemCalendarEvent: Codable, Identifiable, Hashable {
    let id = UUID()
    let eventIdentifier: String
    let title: String
    let startDate: Date
    let endDate: Date
    let isAllDay: Bool
    let calendar: String
    let location: String?
    let notes: String?
    var isMarkedAsSpam: Bool
    var isWhiteListed: Bool
    
    init(from ekEvent: EKEvent, isWhitelisted: Bool = false) {
        self.eventIdentifier = ekEvent.eventIdentifier
        self.title = ekEvent.title ?? "Untitled Event"
        self.startDate = ekEvent.startDate
        self.endDate = ekEvent.endDate
        self.isAllDay = ekEvent.isAllDay
        self.calendar = ekEvent.calendar?.title ?? "Unknown Calendar"
        self.location = ekEvent.location
        self.notes = ekEvent.notes
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ—Ç–∫–∏ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö –¥–ª—è —Å–ø–∞–º–∞
        let notesContent = ekEvent.notes ?? ""
        self.isMarkedAsSpam = notesContent.contains("[MARKED_AS_SPAM]")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π whitelist
        self.isWhiteListed = isWhitelisted
    }
    
    // –û–±—ã—á–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    init(id: UUID = UUID(), eventIdentifier: String, title: String, startDate: Date, endDate: Date, isAllDay: Bool, calendar: String, location: String? = nil, notes: String? = nil, isMarkedAsSpam: Bool = false, isWhiteListed: Bool = false) {
        self.eventIdentifier = eventIdentifier
        self.title = title
        self.startDate = startDate
        self.endDate = endDate
        self.isAllDay = isAllDay
        self.calendar = calendar
        self.location = location
        self.notes = notes
        self.isMarkedAsSpam = isMarkedAsSpam
        self.isWhiteListed = isWhiteListed
    }
    
    var formattedDate: String {
        let formatter = DateFormatter()
        if isAllDay {
            formatter.dateFormat = "d MMM yyyy"
            return formatter.string(from: startDate)
        } else {
            formatter.dateFormat = "d MMM yyyy, HH:mm"
            return formatter.string(from: startDate)
        }
    }
    
    var formattedTimeRange: String {
        if isAllDay {
            return "All day"
        } else {
            let formatter = DateFormatter()
            formatter.dateFormat = "HH:mm"
            let start = formatter.string(from: startDate)
            let end = formatter.string(from: endDate)
            return "\(start) - \(end)"
        }
    }
    
    var source: String {
        return calendar
    }
    
    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    var date: Date {
        return startDate
    }
}

struct EventsStatistics {
    let total: Int
    let spam: Int
    let whitelisted: Int
    let regular: Int
}

// MARK: - Event Deletion Models

enum EventDeletionResult {
    case success
    case failed(EventDeletionError)
}

enum EventDeletionError {
    case noPermission
    case eventNotFound
    case cannotDelete(reason: String)
    case systemError(Error)
    
    var localizedDescription: String {
        switch self {
        case .noPermission:
            return "No permission to access calendar"
        case .eventNotFound:
            return "Event not found in calendar"
        case .cannotDelete(let reason):
            return reason
        case .systemError(let error):
            return "System error: \(error.localizedDescription)"
        }
    }
    
    var isUserActionRequired: Bool {
        switch self {
        case .cannotDelete:
            return true
        default:
            return false
        }
    }
}

struct EventsDeletionResult {
    let deletedCount: Int
    let totalCount: Int
    let failedEvents: [(SystemCalendarEvent, EventDeletionError)]
    
    var hasFailures: Bool {
        return !failedEvents.isEmpty
    }
    
    var cannotDeleteEvents: [(SystemCalendarEvent, EventDeletionError)] {
        return failedEvents.filter { $0.1.isUserActionRequired }
    }
    
    var hasCannotDeleteEvents: Bool {
        return !cannotDeleteEvents.isEmpty
    }
}
